#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}

// find replacement victim
pair<uint32_t, uint32_t> CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    pair<uint32_t, uint32_t> address;

    if (remap[set].remap_set == set)
    {
        address.first = set;
        address.second = lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type);
    }
    else
    {
        uint32_t way_in_set = lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type);
        uint32_t remapped_set = remap[set].remap_set;
        uint32_t way_in_remapped_set = lru_victim(cpu, instr_id, remapped_set, current_set, ip, full_addr, type);

        if (block[set][way_in_set].valid == false || block[set][way_in_set].lru > block[remapped_set][way_in_remapped_set].lru)
        {
            address.first = set;
            address.second = way_in_set;
        }
        else
        {
            address.first = remapped_set;
            address.second = way_in_remapped_set;
        }
    }

    return address;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{

}
